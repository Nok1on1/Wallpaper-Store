// <auto-generated />
using System;
using AvaloniaApplication1.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AvaloniaApplication1.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AvaloniaApplication1.Models.Client", b =>
                {
                    b.Property<string>("CName")
                        .HasColumnType("text");

                    b.HasKey("CName");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AvaloniaApplication1.Models.Restock", b =>
                {
                    b.Property<string>("WId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WProdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WCompany")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RestockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SName")
                        .HasColumnType("text");

                    b.Property<float?>("BasePrice")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("WId", "WProdDate", "WCompany", "RestockDate", "SName");

                    b.HasIndex("SName");

                    b.ToTable("Restocks");
                });

            modelBuilder.Entity("AvaloniaApplication1.Models.Sell", b =>
                {
                    b.Property<string>("WId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WProdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WCompany")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CName")
                        .HasColumnType("text");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<float>("WholePrice")
                        .HasColumnType("real");

                    b.HasKey("WId", "WProdDate", "WCompany", "PurchaseDate", "CName");

                    b.HasIndex("CName");

                    b.ToTable("Sells");
                });

            modelBuilder.Entity("AvaloniaApplication1.Models.Seller", b =>
                {
                    b.Property<string>("SName")
                        .HasColumnType("text");

                    b.HasKey("SName");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("AvaloniaApplication1.Models.Wallpapers", b =>
                {
                    b.Property<string>("WId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WProdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WCompany")
                        .HasColumnType("text");

                    b.Property<byte[]>("WImage")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("WQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("WWidth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WId", "WProdDate", "WCompany");

                    b.ToTable("Wallpapers");
                });

            modelBuilder.Entity("AvaloniaApplication1.Models.Restock", b =>
                {
                    b.HasOne("AvaloniaApplication1.Models.Seller", "Seller")
                        .WithMany("Restocks")
                        .HasForeignKey("SName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvaloniaApplication1.Models.Wallpapers", "Wallpapers")
                        .WithMany("Restocks")
                        .HasForeignKey("WId", "WProdDate", "WCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");

                    b.Navigation("Wallpapers");
                });

            modelBuilder.Entity("AvaloniaApplication1.Models.Sell", b =>
                {
                    b.HasOne("AvaloniaApplication1.Models.Client", "Client")
                        .WithMany("Sells")
                        .HasForeignKey("CName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvaloniaApplication1.Models.Wallpapers", "Wallpapers")
                        .WithMany("Sells")
                        .HasForeignKey("WId", "WProdDate", "WCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Wallpapers");
                });

            modelBuilder.Entity("AvaloniaApplication1.Models.Client", b =>
                {
                    b.Navigation("Sells");
                });

            modelBuilder.Entity("AvaloniaApplication1.Models.Seller", b =>
                {
                    b.Navigation("Restocks");
                });

            modelBuilder.Entity("AvaloniaApplication1.Models.Wallpapers", b =>
                {
                    b.Navigation("Restocks");

                    b.Navigation("Sells");
                });
#pragma warning restore 612, 618
        }
    }
}
